;
; This example code illustrates how to access and visualize GES DISC
; MERRA HDF-EOS2 Grid file in IDL. 
;
; If you have any questions, suggestions, comments  on this example, 
; please use the HDF-EOS Forum (http://hdfeos.org/forums).
;
; If you would like to see an  example of any other NASA HDF/HDF-EOS 
; data product that is not listed in the HDF-EOS Comprehensive Examples page
; (http://hdfeos.org/zoo), feel free to contact us at eoshelp@hdfgroup.org
; or post it at the HDF-EOS Forum (http://hdfeos.org/forums).
; Usage:
;                               
; %idl MERRA300.prod.assim.tavgU_2d_chm_Fx.200201.hdf.idl
;
; Tested under: IDL 8.6.1
; Last updated: 2017-12-18
;
; Open file.
FILE_NAME='MERRA300.prod.assim.tavgU_2d_chm_Fx.200201.hdf'
file_id = EOS_GD_OPEN(FILE_NAME)

; Define grid name and field
GRID_NAME='EOSGRID'
DATAFIELD_NAME='CLDHGH'

; Retrieve data.
grid_id = EOS_GD_ATTACH(file_id, GRID_NAME)
status = EOS_GD_READFIELD(grid_id, DATAFIELD_NAME, data)

; Retrieve fillvalue.
status=EOS_GD_GETFILLVALUE(grid_id, DATAFIELD_NAME, fillvalue)
status = EOS_GD_DETACH(grid_id)

; Retrieve latitude and logitude.
GRID_NAME='EOSGRID'
DATAFIELD_NAME='XDim'
grid_id = EOS_GD_ATTACH(file_id, GRID_NAME)
status = EOS_GD_READFIELD(grid_id, DATAFIELD_NAME, lon)
status = EOS_GD_DETACH(grid_id)

GRID_NAME='EOSGRID'
DATAFIELD_NAME='YDim'
grid_id = EOS_GD_ATTACH(file_id, GRID_NAME)
status = EOS_GD_READFIELD(grid_id, DATAFIELD_NAME, lat)
status = EOS_GD_DETACH(grid_id)
status = EOS_GD_CLOSE(file_id)

; Convert the 3D data to 2D data at TIME=4
data2D = data[*,*,4]
data2D = Reform(data2D)

; Convert data type.
data2D = float(data2D)
fillvalue=float(fillvalue)

; Retrieve attributes.
FILE_NAME='MERRA300.prod.assim.tavgU_2d_chm_Fx.200201.hdf'
newFileID=HDF_SD_START(FILE_NAME, /READ)

DATAFIELD_NAME='CLDHGH'
index = HDF_SD_NAMETOINDEX(newFileID, DATAFIELD_NAME)

thisSdsID=HDF_SD_SELECT(newFileID, index)

long_name_index=HDF_SD_ATTRFIND(thisSdsID, 'long_name')
HDF_SD_ATTRINFO, thisSdsID, long_name_index, DATA=long_name

units_index=HDF_SD_ATTRFIND(thisSdsID, 'units')
HDF_SD_ATTRINFO, thisSdsID, units_index, DATA=units

scalefactor_index=HDF_SD_ATTRFIND(thisSdsID, 'scale_factor')
HDF_SD_ATTRINFO, thisSdsID, scalefactor_index, DATA=scale_factor

offset_index=HDF_SD_ATTRFIND(thisSdsID, 'add_offset')
HDF_SD_ATTRINFO, thisSdsID, offset_index, DATA=offset
HDF_SD_END, newFileID

; Process fill values, convert data that are equal to fillvalue to NaN.
idx=where(data2D eq fillvalue, cnt)
if cnt gt 0 then data2D[idx] = !Values.F_NAN

; Apply scale factor and offset.
data2D=offset(0)+(scale_factor(0))*data2D

; Plot data.
m = MAP('Geographic', TITLE=file_name, FONT_SIZE=9, /BUFFER)
ct = COLORTABLE(72, /reverse)
t1 = TEXT(0.05, 0.2, FONT_SIZE=8, long_name + ' at TIME=4' )
c1 = CONTOUR(data2D, lon, lat, /FILL, OVERPLOT=m, $
             RGB_TABLE=ct, $
             GRID_UNITS='degrees', POSITION=[0.1, 0.1, 0.83, 0.9])
mc = MAPCONTINENTS()
cb = COLORBAR(TARGET=c1, /BORDER, ORIENTATION=1, TEXTPOS=1, POSITION=[0.85,0.2,0.87,0.8], TITLE=units)
png = file_name + '.idl.png'
c1.save, png, HEIGHT=600, WIDTH=800
EXIT
