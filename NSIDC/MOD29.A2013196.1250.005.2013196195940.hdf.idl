;  This example code illustrates how to access and visualize NSIDC
;  MOD29 L2 HDF-EOS2 Swath file in IDL. 
;
; If you have any questions, suggestions, comments  on this example, 
; please use the HDF-EOS Forum (http://hdfeos.org/forums).
;
;  If you would like to see an  example of any other NASA HDF/HDF-EOS 
; data product that is not listed in the HDF-EOS Comprehensive Examples page
; (http://hdfeos.org/zoo), feel free to contact us at eoshelp@hdfgroup.org
; or post it at the HDF-EOS Forum (http://hdfeos.org/forums).

; Usage:
;
;  %idl MOD29.A2013196.1250.005.2013196195940.hdf.idl
;
; Tested under: IDL 8.1
; Last updated: 2013-7-17

; Define file name, swath name, and data field.
file_name='MOD29.A2013196.1250.005.2013196195940.hdf'
swath_name='MOD_Swath_Sea_Ice'
datafield_name='Ice_Surface_Temperature'

; Open file.
file_id=EOS_SW_OPEN(file_name)

; Attach Swath.
swath_id=EOS_SW_ATTACH(file_id, swath_name)

; Retrieve data.
status=EOS_SW_READFIELD(swath_id,datafield_name,data)

; Detach Swath.
status=EOS_SW_DETACH(swath_id)

; Close file.
status=EOS_SW_CLOSE(file_id)

; Retrieve units, scale factor, and offset using HDF4 APIs.
hdf_file_id=HDF_SD_START(file_name, /READ)
index=HDF_SD_NAMETOINDEX(hdf_file_id, datafield_name)
sds_id=HDF_SD_SELECT(hdf_file_id, index)
units_index=HDF_SD_ATTRFIND(sds_id, 'units')
HDF_SD_ATTRINFO, sds_id, units_index, DATA=units
scalefactor_index=HDF_SD_ATTRFIND(sds_id, 'scale_factor')
HDF_SD_ATTRINFO, sds_id, scalefactor_index, DATA=scale_factor
offset_index=HDF_SD_ATTRFIND(sds_id, 'add_offset')
HDF_SD_ATTRINFO, sds_id, offset_index, DATA=offset
offset_index=HDF_SD_ATTRFIND(sds_id, '_FillValue')
HDF_SD_ATTRINFO, sds_id, offset_index, DATA=fillvalue
offset_index=HDF_SD_ATTRFIND(sds_id, 'long_name')
HDF_SD_ATTRINFO, sds_id, offset_index, DATA=long_name
valid_range_index=HDF_SD_ATTRFIND(sds_id, 'valid_range')
HDF_SD_ATTRINFO, sds_id, valid_range_index, data=valid_range
HDF_SD_END, hdf_file_id

; Retrieve lat/lon.
; Since dimension maps are used in the MOD29 file, we must use
; geolocation values that are stored in a secondary file.
file_name_geo='MOD03.A2013196.1250.005.2013196194144.hdf'
swath_name= 'MODIS_Swath_Type_GEO'
file_id = EOS_SW_OPEN(file_name_geo)
swath_id=EOS_SW_ATTACH(file_id, swath_name)

status=EOS_SW_READFIELD(swath_id,'Longitude',lon)
status=EOS_SW_READFIELD(swath_id,'Latitude',lat)

status=EOS_SW_DETACH(swath_id)
status=EOS_SW_CLOSE(file_id)


; Convert data type.
dataf=float(data)

; Process fillvalue.
idx=WHERE(data EQ fillvalue(0), cnt)
IF cnt GT 0 THEN dataf[idx] = !Values.F_NAN

; Process valid_range.
idx=WHERE(data LT valid_range(0) OR data GT valid_range(1), cnt)
IF cnt GT 0 THEN dataf[idx] = !Values.F_NAN

; Apply scale factor and offset.
dataf=offset(0)+(scale_factor(0))*dataf

; Get max and min value of data.
datamin = MIN(dataf, /NAN)
datamax = MAX(dataf, /NAN)

; Prepare field name title using long name attribute.
field = long_name(0)

; Generate the plot.
levels=254
DEVICE,DECOMPOSED=0
LOADCT,33, NCOLORS=levels, BOTTOM=1

; Set a fixed window size 800x600 for JPEG output. 
WINDOW, Title = 'FIELD:' + long_name + '  '+'UNIT:'+units, $
  XSIZE=800,YSIZE=600

; Get min/max value of lat and lon for zoomed image.
latmin=MIN(lat)
latmax=MAX(lat)

; We want to view the full circle around the South Pole.
lonmin=-180
lonmax=180

; ISOTROPIC ensures a full circle map, not an ellipitical map.
MAP_SET, /STEREOGRAPHIC, /ISOTROPIC, -90, 0, $
  /CONTINENTS, XMARGIN=5, YMARGIN=5, $
  POSITION=[0.05, 0.05, 0.82, 0.82], LIMIT=[latmin, lonmin, latmax, lonmax]   

CONTOUR, dataf, lon, lat, /OVERPLOT, /CELL_FILL, C_COLORS=INDGEN(levels)+3, $ 
  NLEVELS=levels
MAP_GRID, /BOX_AXES
MAP_CONTINENTS

; Draw file name, field name, and unit.
XYOUTS, 0.4, 0.86, /NORMAL, 'FIELD:' + field, $
  CHARSIZE=1.25,  ALIGNMENT=0.5
XYOUTS, 0.94, 0.86, /NORMAL, 'UNIT:' + units, $ 
  CHARSIZE=1.25,  ALIGNMENT=1.0
XYOUTS, 0.43, 0.92, /NORMAL, file_name, $
  CHARSIZE=1.75,  ALIGNMENT=0.5

; The following code is prepared for colorbar. 
;
;   If you require colorbar in your plot, you could download 
; "Dr. Fanning's Coyote Library" from [1]. Make a directory named
; coyote somewhere on your machine, and extract the Coyote files into
; it. 
;
;   If color bar is not not necessary for your plot, you can ignore this
; step and add comment character ';' ahead of coding. 
;
;    Add the coyote directory you create on your machine to your IDL
;  path like below: 
;
; !PATH=Expand_Path('[coyote directory on your machine])+':'+!PATH

; We assume that the coyote library is installed under the current working
; directory that this code exists.
!PATH=EXPAND_PATH('+coyote/')+':'+!PATH

;  The following code assumes that you've already download and installed 
; "Dr. Fanning's Coyote Library" and add the coyote directory above. 
;
;  If you don't need color bar in your plot, you can ignore this step
;  by adding comment character ';' at the beginning of the code.
COLORBAR, RANGE=[datamin, datamax], NCOLORS=levels, /VERTICAL, $ 
  POSITION=[0.9,0.05,0.94,0.8]

; Write JPEG image file.
im = TVRD(TRUE=3)
jpg = file_name + '.idl.jpg'   
WRITE_JPEG, jpg, im, QUALITY=100, TRUE=3
EXIT

; Reference
;
; [1] Coyote's Guide to IDL Programming.
;     http://www.dfanning.com/documents/programs.html


