;  This example code illustrates how to access and visualize NSIDC MODIS
; Grid file in IDL. This Grid file uses geographic projection.
;
; If you have any questions, suggestions, comments  on this example, 
; please use the HDF-EOS Forum (http://hdfeos.org/forums).
;
;  If you would like to see an  example of any other NASA HDF/HDF-EOS 
; data product that is not listed in the HDF-EOS Comprehensive Examples page
; (http://hdfeos.org/zoo), feel free to contact us at eoshelp@hdfgroup.org
; or post it at the HDF-EOS Forum (http://hdfeos.org/forums).

; Define file name, grid name, and data field.
FILE_NAME='MOD10C1.A2005018.005.2007349093349.hdf'
GRID_NAME='MOD_CMG_Snow_5km'
DATAFIELD_NAME='Day_CMG_Snow_Cover'

; Open file.
file_id = EOS_GD_OPEN(FILE_NAME)

; Attach grid.
grid_id = EOS_GD_ATTACH(file_id, GRID_NAME)

; Retrieve data.
status = EOS_GD_READFIELD(grid_id, DATAFIELD_NAME, data)
status = EOS_GD_GRIDINFO(grid_id, xdimsize, ydimsize, upleft, lowright)
status = EOS_GD_PIXREGINFO(grid_id, pixregcode)

; Detach Grid.
status = EOS_GD_DETACH(grid_id)

; Close file.
status = EOS_GD_CLOSE(file_id)

; Retrieve long_name, Key, fillvalue and units attributes.
newFileID=HDF_SD_START(FILE_NAME, /READ)

DATAFIELD_NAME='Day_CMG_Snow_Cover'
index = HDF_SD_NAMETOINDEX(newFileID, DATAFIELD_NAME)

thisSdsID=HDF_SD_SELECT(newFileID, index)

long_name_index=HDF_SD_ATTRFIND(thisSdsID, 'long_name')
HDF_SD_ATTRINFO, thisSdsID, long_name_index, data=long_name

units_index=HDF_SD_ATTRFIND(thisSdsID, 'units')
HDF_SD_ATTRINFO, thisSdsID, units_index, DATA=units

key_index=HDF_SD_ATTRFIND(thisSdsID, 'Key')
HDF_SD_ATTRINFO, thisSdsID, key_index, data=key

HDF_SD_END, newFileID

; Check "Key" attribute to plot the data correctly. It will print:
; 
; 0-100=percent of snow in cell, 107=lake ice, 111=night, 
; 250=cloud obscured water,253=data not mapped, 254=water mask, 255=fill
PRINT, Key

; Check what discrete "Key" values are used to determine color table
; and discrete color bar.
data_used = data[UNIQ(data, SORT(data))] 
PRINT, data_used

; To get a similar image to NSIDC browse image [1], 
; construct a color table based on the following assignment:
;
; Key      R  G   B    Name
; ==========================
;  0%     0   100 0    dark green
;  1-99%  127 127 127  grey
;  100%   255 255 255  white
;  107    255 176 255  pink  
;  111    0   0   0    black
;  250    100 200 255
;  253    255 0   255  magenta
;  254    0   0   205  medium blue
;  255    138 42  226  blue violet
;
;  The "bg" means the background color.
;
;  Please note that 253 is not used in this data set as you can verify it
;  using "PRINT, data_used" statement above.
;
;  We added two more (0% and 1-99%) entries for ice coverage to get better
;  image.
;         bg  0%, 1-99%, 100%  107  111 250  254, 255
red =   [ 0,  0,  127,   255,  255, 0,  100, 0,   138]
green = [ 0,  100,127,   255,  176, 0,  200, 0,   43]
blue =  [ 0,  0,  127,   255,  255, 0,  255, 205, 226]

; Construct a discrete data for plot.
data_discrete = data

; Put 1%-99% data under one grey label.
data_discrete[WHERE(data GT 0 AND data LT 100 )] = 99

; Create an array for levels in plot.
data_unique = data_discrete[UNIQ(data_discrete, SORT(data_discrete))] 
PRINT, data_unique

; Save the  number of levels for discrete color bar.
dimsize_data_unique = size(data_unique,/dim)
levels = dimsize_data_unique(0)

; Compute lat / lon data.
; 
; We assume that HDFE_CENTER is 0 by default. See GDdefpixreg() in 
; "HDF-EOS Library Users Guide for the ECS Project Volume 2: Function
; Reference Guide".
IF (pixregcode EQ 1) THEN PRINT, 'ERROR:Pixel is not centered.' 
IF (pixregcode EQ 1) THEN EXIT

; Pixel must be centered.
offsetX = 0.5
offsetY = 0.5

; We need to readjust the limits of latitude and longitude. 
; HDF-EOS is using DMS(DDDMMMSSS.SS) format to represent degrees.
; To calculate the lat and lon in degrees, one needs to convert
; minutes and seconds into degrees. 

; The following is the detailed description on how to calculate the
; latitude  and longitude range based on lowright and upleft.
; One should observe the fact that 1 minute is 60 seconds and 1 degree 
; is 60 minutes. 

; First calculate the difference of .SS between lowright and upleft.
; Since the resulting number is very large, you need to specify /L64.
lowright_ss= lowright*100-FLOOR(lowright, /L64)*100
upleft_ss = upleft*100-FLOOR(upleft, /L64)*100;
dss = lowright_ss - upleft_ss;

; Calculate the difference of SSS between lowright and upleft.
lowright_s = floor(lowright) MOD 1000
upleft_s = floor(upleft) MOD 1000
ds = lowright_s - upleft_s +dss/100;

; Calculate the difference of MMM between lowright and upleft.
lowright_m = floor(lowright/1000) MOD 1000
upleft_m = floor(upleft/1000) MOD 1000
dm = lowright_m-upleft_m +ds/60;

; Calculate the difference of DDD between lowright and upleft.
lowright_d = floor(lowright/1000000)
upleft_d = floor(upleft/1000000)
dd = lowright_d-upleft_d+dm/60

lat_limit = dd(1);
lon_limit = dd(0);

; We need to calculate the grid space interval between two adjacent points.
scaleX = lon_limit/xdimsize
scaleY = lat_limit/ydimsize

lon_value= FINDGEN(xdimsize)
lat_value= FINDGEN(ydimsize)
for i=0,xdimsize-1 do lon_value(i) = (i+offsetX)*(scaleX) + upleft_d(0);
for j=0,ydimsize-1 do lat_value(j) = (j+offsetX)*(scaleY) + upleft_d(1);

lon = float(lon_value)
lat = float(lat_value)


; Generate the plot.
DEVICE, DECOMPOSED=0
TVLCT, red, green, blue
WINDOW, TITLE='FIELD:' + DATAFIELD_NAME + '   UNIT:'+units, XSIZE=800
MAP_SET, /GRID, /CONTINENTS, XMARGIN=5, YMARGIN=5, $
  POSITION=[0.05, 0.05, 0.82, 0.82]
CONTOUR, data_discrete, lon, lat, /OVERPLOT, /CELL_FILL,$
 C_Colors=Indgen(levels)+1, LEVELS=data_unique

MAP_GRID, /BOX_AXES, COLOR=255
MAP_CONTINENTS, COLOR=255

XYOuts, 0.05, 0.86, /Normal, DATAFIELD_NAME, $
  Charsize=1.25, color=black, Alignment=0.0
XYOuts, 0.82, 0.86, /Normal, 'UNIT:' + units, $ 
  Charsize=1.25, Color=black, Alignment=1.0
XYOuts, 0.5, 0.92, /Normal, FILE_NAME, $
  Charsize=1.75, Color=black, Alignment=0.5

;   The following code is prepared for colorbar. 
;
;   If you require colorbar in your plot, you could download 
; "Dr. Fanning's Coyote Library" from [2]. Make a directory named
; coyote somewhere on your machine, and extract the Coyote files into
; it. 
;
;   If color bar is not not necessary for your plot, you can ignore this
; step and add comment character ';' ahead of coding. 
;
;    Add the coyote directory you create on your machine to your IDL
;  path like below: 
;
; !PATH=Expand_Path('[coyote directory on your machine])+':'+!PATH

; Let's assume that you've installed coyote library under the current working
; directory that this code exists.
!PATH=Expand_Path('+coyote/')+':'+!PATH
; We shortened 'missing data' to 'missing'.
DCbar, NCOLORS=levels, BOTTOM=1,  /VERTICAL, Position=[0.85,0.1,0.87,0.8], $
LABELS=['0% snow', '1-99% snow',  '100% snow', 'lake ice', 'night', 'cloud obscured!Cwater', 'water mask', 'fill'] 

; Reference
;
; [1] http://nsidc.org/data/modis/images/cmg_browse/2001/Oct/MOD10C1.A2001274.004.2003155025155.png
; [2] http://www.dfanning.com/documents/programs.html



